{"version":3,"file":"utest.js","sources":["../src/method.js"],"sourcesContent":["\r\n/**\r\n * 对象方法\r\n *\r\n * @class\r\n */\r\nexport class Method {\r\n    /**\r\n     * 获取方法的类型\r\n     * @param {string} [key] - 方法对应的唯一键值\r\n     * @return {string} \"get\" | \"set\" | \"\"\r\n     */\r\n    static getMethodType(key) {\r\n        let type = key.split('-')[1];\r\n        return type;\r\n    }\r\n\r\n    /**\r\n     * @param {object} [options] - 配置参数.\r\n     * @param {string} [options.key] - 与配置对应的唯一键值\r\n     * @param {object} [options.obj] - 包含原方法的对象\r\n     * @param {string} [options.name] - 原方法的函数名称\r\n     * @param {function | undefined} [options.cond] - 捕获方法的原始参数, 根据参数决定是否添加断点\r\n     */\r\n    constructor(options) {\r\n        options = options || {};\r\n\r\n        /**\r\n         * 一个方法对应的唯一键值\r\n         * 命令规则: 方法名-类型\r\n         * @example \r\n         * name-get name-set name\r\n         * \r\n         * @member {string} \r\n         */\r\n        this.key = options.key;\r\n\r\n        this.obj = options.obj;\r\n\r\n        this.name = options.name;\r\n\r\n        this.cond = options.cond || function () { return true };\r\n\r\n        this.desp = Object.getOwnPropertyDescriptor(this.obj, this.name);\r\n\r\n        this.type = this.getMethodType(this.key);\r\n\r\n    }\r\n\r\n}"],"names":[],"mappings":";;;;AACA;;;;;AAKA,AAAO,MAAM,MAAM,CAAC;;;;;;IAMhB,OAAO,aAAa,CAAC,GAAG,EAAE;QACtB,IAAI,IAAI,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QAC7B,OAAO,IAAI,CAAC;KACf;;;;;;;;;IASD,WAAW,CAAC,OAAO,EAAE;QACjB,OAAO,GAAG,OAAO,IAAI,EAAE,CAAC;;;;;;;;;;QAUxB,IAAI,CAAC,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC;;QAEvB,IAAI,CAAC,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC;;QAEvB,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;;QAEzB,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,IAAI,YAAY,EAAE,OAAO,IAAI,EAAE,CAAC;;QAExD,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC,wBAAwB,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;;QAEjE,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;;KAE5C;;;;;;"}