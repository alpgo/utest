{"version":3,"file":"utest.js","sources":["../src/utils/print.js","../src/utils/helper.js","../src/method/method.js","../src/method/container.js"],"sourcesContent":["\r\n// \r\nconst noop = function () { };\r\n\r\n/**\r\n  * 控制台打印方法. 可打印出函数的调用栈. 很方便查看函数代码的调用顺序.\r\n  * @param {Error} [err] - 错误对象, 因为该对象包含了函数调用堆栈信息\r\n  * @return {Function} 可进一步打印出Array或者Object等数据\r\n  * @example\r\n  *  printLoc(new Error(), \"hello\");\r\n  *  printLoc(new Error(), \"hello\", \"This is a message\");\r\n  *  printLoc(new Error(), \"hello\", \"This is a message\")({name: \"utest\"});\r\n  *  printLoc(new Error(), \"hello\", \"This is a message\")([\"one\", \"two\"]);\r\n  */\r\nexport function printLoc(err) {\r\n    // 检测err\r\n    if (Object.prototype.toString.call(err) != \"[object Error]\") {\r\n        console.warn('The First param must be an Error Object');\r\n        return noop;\r\n    }\r\n\r\n    // 提取函数调用堆栈信息\r\n    var lines = err.stack.split('\\n');\r\n    var msg = Array.prototype.slice.call(arguments, 1).join(\" \");\r\n    var firstLine = \"Error\\t\" + msg;\r\n    var result = [firstLine].concat(lines.slice(1)).join(\"\\n\");\r\n    console.log(result);\r\n    return function () { console.log.apply(null, arguments); };\r\n}","\r\n/**\r\n * 获取方法的原始函数\r\n * @param {string} type 方法类型(get方法, set方法, 普通方法)\r\n * @param {object} obj  包含方法的对象\r\n * @param {string} name 方法名称\r\n * @return {function}\r\n */\r\nexport function getOriginFunc(type, obj, name) {\r\n    let desp = Object.getOwnPropertyDescriptor(obj, name);\r\n    if (desp.value) {\r\n        return desp.value;\r\n    }\r\n    if (desp.get && \"get\" === type) {\r\n        return desp.get;\r\n    }\r\n    if (desp.set && \"set\" === type) {\r\n        return desp.set;\r\n    }\r\n    console.warn(`something run, maybe type: ${type}`);\r\n    return function () { };\r\n}","import * as utils from '../utils/index';\r\n\r\n/**\r\n * @class\r\n */\r\nexport class Method {\r\n    /**\r\n     * 获取方法的类型\r\n     * @static\r\n     * @param {string} [key] - 方法对应的唯一键值\r\n     * @return {string} \"get\" | \"set\" | \"\"\r\n     */\r\n    static getMethodType(key) {\r\n        let type = key.split('-')[1];\r\n        return type;\r\n    }\r\n\r\n    /**\r\n     * @param {object} [options] - 配置参数.\r\n     * @param {string} [options.key] - 与配置对应的唯一键值\r\n     * @param {object} [options.obj] - 包含原方法的对象\r\n     * @param {string} [options.name] - 原方法的函数名称\r\n     * @param {function | undefined} [options.cond] - 捕获方法的原始参数, 根据参数决定是否添加断点\r\n     */\r\n    constructor(options) {\r\n        options = options || {};\r\n\r\n        /**\r\n         * 一个方法对应的唯一键值\r\n         * 命令规则: 方法名-类型\r\n         * @example \r\n         * name-get name-set name\r\n         * \r\n         * @member {string} \r\n         */\r\n        this.key = options.key;\r\n\r\n        this.obj = options.obj;\r\n\r\n        this.name = options.name;\r\n\r\n        this.cond = options.cond || function () { return true };\r\n\r\n        /**\r\n         * 方法的descriptor\r\n         */\r\n        this.desp = Object.getOwnPropertyDescriptor(this.obj, this.name);\r\n\r\n        /**\r\n         * 方法的类型\r\n         */\r\n        this.type = Method.getMethodType(this.key);\r\n\r\n        /**\r\n         * 原始方法的函数\r\n         */\r\n        this.func = utils.getOriginFunc(this.type, this.obj, this.name);\r\n    }\r\n\r\n    /**\r\n     * 设置代理方法\r\n     * @param {function} newFunc\r\n     */\r\n    setProxyMethod(newFunc) {\r\n        if (this.desp.value) {\r\n            this.desp.value = newFunc;\r\n        }\r\n        if (this.desp.get && \"get\" === this.type) {\r\n            this.desp.get = newFunc;\r\n        }\r\n        if (this.desp.set && \"set\" === this.type) {\r\n            this.desp.set = newFunc;\r\n        }\r\n        Object.defineProperty(this.obj, this.name, this.desp);\r\n    }\r\n\r\n    /**\r\n     * 恢复原始方法\r\n     */\r\n    setOriginMethod() {\r\n        const type = this.type;\r\n        if (this.desp.value) {\r\n            this.desp.value = this.func;\r\n        }\r\n        if (type == \"get\" && this.desp.get) {\r\n            this.desp.get = this.func;\r\n        }\r\n        if (type == \"set\" && this.desp.set) {\r\n            this.desp.set = this.func;\r\n        }\r\n        Object.defineProperty(this.obj, this.name, this.desp);\r\n    }\r\n\r\n    toDebug() {\r\n        let that = this;\r\n        this.setProxyMethod(function () {\r\n            let testFlag = false;\r\n            let cond = that.cond;\r\n\r\n            // 若条件判断正确, 则添加调试\r\n            if (cond.apply(this, arguments)) {\r\n                testFlag = true;\r\n                utils.printLoc(new Error(), `[name]: ${that.name}`);\r\n                debugger;\r\n            }\r\n\r\n            const result = that.originFunc.apply(this, arguments);\r\n\r\n            // 如果已经被测试完, 则立即恢复原函数. \r\n            // 否则, 继续保持待测试状态, 直到测试完再恢复. \r\n            if (testFlag) {\r\n                that.setOriginMethod();\r\n            }\r\n\r\n            return result;\r\n        });\r\n    }\r\n}","import { Method } from \"./method\";\r\n\r\n/**\r\n * @constant {string: Method} container\r\n */\r\nconst container = {};\r\n\r\n/**\r\n * 保存配置\r\n * @param {string} key \r\n * @param {Method} method \r\n */\r\nexport function save(key, method) {\r\n    container[key] = method;\r\n}\r\n\r\n/**\r\n * 获取配置\r\n * @param {string} key \r\n * @return {Method | null} \r\n */\r\nexport function get(key) {\r\n    return container[key] || null;\r\n}\r\n\r\n/**\r\n * 设置方法为待调试方法\r\n * 当待测试的方法运行时, 会暂停运行\r\n * \r\n * @param {string} key 方法对应的唯一键值\r\n */\r\nexport function run(key) {\r\n    const method = get(key);\r\n    if (!method) {\r\n        console.warn(\"无法找到键值: {\" + key + \"} 对应的对象方法\");\r\n        return;\r\n    }\r\n    method.toDebug();\r\n}"],"names":["const","let","utils.getOriginFunc","utils.printLoc"],"mappings":"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"}